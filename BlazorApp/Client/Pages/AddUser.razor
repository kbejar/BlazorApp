@page "/user/add"
@page "/user/edit/{userId:int}"
@using BlazorApp.Shared.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h1>@Title User</h1>
<hr />

<EditForm Model="@user" OnValidSubmit="SaveUser">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="Name" class="form-label">Lastname</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="user.Lastname" />
        </div>
        <ValidationMessage For="@(() => user.Lastname)" />
    </div>
    <div class="mb-3">
        <label for="Name" class="form-label">Firstname</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="user.Firstname" />
        </div>
        <ValidationMessage For="@(() => user.Firstname)" />
    </div>
            <div class="mb-3">
        <label for="Name" class="form-label">Middlename</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="user.Middlename" />
        </div>
        <ValidationMessage For="@(() => user.Middlename)" />
    </div>
    <div class="mb-3">
        <label for="Address" class="form-label">Address</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="user.Address" />
        </div>
        <ValidationMessage For="@(() => user.Address)" />
    </div>
    <div class="mb-3">
        <label for="Cellnumber" class="form-label">Cell No</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="user.Cellnumber" />
        </div>
        <ValidationMessage For="@(() => user.Cellnumber)" />
    </div>
    <div class="mb-3">
        <label for="Emailid" class="form-label">E-mail</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="user.Emailid" />
        </div>
        <ValidationMessage For="@(() => user.Emailid)" />
    </div>
    <div class="mb-3">
        <label for="PositionId" class="form-label">Position</label>
        <div class="col-md-4">
            <select class="form-control" @bind="@user.PositionId">
                <option value="">-- Select Position --</option>
                @foreach (var position in positionList)
                {
                    <option value="@position.PositionId">@position.PositionName</option>
                }
            </select>
        </div>
    </div>
    <div class="mb-3">
        <label for="DepartmentId" class="form-label">Department</label>
        <div class="col-md-4">
            <select class="form-control" @bind="@user.DepartmentId">
                <option value="">-- Select Department --</option>
                @foreach (var department in departmentList)
                {
                    <option value="@department.DepartmentId">@department.DepartmentName</option>
                }
            </select>
        </div>
    </div>
    <div class="mb-3">
        <label for="CompanyId" class="form-label">Company</label>
        <div class="col-md-4">
            <select class="form-control" @bind="@user.CompanyId">
                <option value="">-- Select Company --</option>
                @foreach (var company in companyList)
                {
                    <option value="@company.CompanyId">@company.CompanyName</option>
                }
            </select>
        </div>
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int userId { get; set; }

    protected string Title = "Add";
    protected User user = new();

    protected Position position = new();

    protected Department department = new();

    protected Company company = new();

    protected List<Position> positionList = new();

    protected List<Department> departmentList = new();

    protected List<Company> companyList = new();

    protected override async Task OnInitializedAsync()
    {
        await GetPosition();
        await GetDepartment();
        await GetCompany();
    }

    protected async Task GetPosition()
    {
        positionList = await Http.GetFromJsonAsync<List<Position>>("api/Position");
    }

    protected async Task GetDepartment()
    {
        departmentList = await Http.GetFromJsonAsync<List<Department>>("api/Department");
    }

    protected async Task GetCompany()
    {
        companyList = await Http.GetFromJsonAsync<List<Company>>("api/Company");
    }

    protected override async Task OnParametersSetAsync()
    {
        if (userId != 0)
        {
            Title = "Edit";
            user = await Http.GetFromJsonAsync<User>("api/User/" + userId);
        }

    }

    protected async Task SaveUser()
    {
        if (user.Userid != 0)
        {
            await Http.PutAsJsonAsync("api/User", user);
        }
        else
        {
            await Http.PostAsJsonAsync("api/User", user);
        }
        Cancel();
    }

    public void Cancel()
    {
        NavigationManager.NavigateTo("/fetchuserdetails");
    }
}